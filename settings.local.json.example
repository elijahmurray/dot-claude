{
  "permissions": {
    "deny": [
      "Bash(rm *settings.local.json*)",
      "Bash(rm .claude/settings.local.json)",
      "Bash(git rm *settings.local.json*)"
    ],
    "allow": [
      "Bash(find:*)",
      "Bash(gh pr create:*)",
      "Bash(gh issue list:*)",
      "Bash(gh issue create:*)",
      "Bash(git checkout:*)",
      "Bash(docker-compose up:*)",
      "Bash(./dev-start.sh:*)",
      "Bash(ls:*)",
      "Bash(docker-compose restart:*)",
      "Bash(pip install:*)",
      "Bash(./dev-stop.sh:*)",
      "Bash(./dev-start.sh:*)",
      "Bash(gh pr view:*)",
      "Bash(source:*)",
      "Bash(black:*)",
      "Bash(flake8:*)",
      "Bash(mkdir:*)",
      "Bash(git worktree:*)",
      "Bash(gh pr checkout:*)",
      "Bash(npm install)",
      "Bash(python:*)",
      "Bash(mkdir:*)",
      "Bash(git worktree:*)",
      "Bash(npm test)",
      "Bash(npm run lint)",
      "Bash(npm run format:*)",
      "Bash(grep:*)",
      "Bash(git fetch:*)",
      "Bash(git merge:*)",
      "Bash(gh pr comment:*)",
      "Bash(git pull:*)",
      "Bash(curl:*)",
      "Bash(gh pr list:*)",
      "Bash(docker-compose logs:*)",
      "Bash(brew list:*)",
      "Bash(docker-compose stop:*)",
      "Bash(docker-compose build:*)",
      "Bash(python -m pytest tests/ -v)",
      "Bash(./venv/bin/flake8 app/ --extend-ignore=E203,W503,E402,E501)",
      "Bash(./venv/bin/isort app/)",
      "Bash(python:*)",
      "Bash(rm:*)",
      "mcp__render__list_workspaces",
      "mcp__render__list_services",
      "mcp__render__get_service",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(gh pr diff:*)",
      "Bash(docker-compose:*)",
      "Bash(gh issue view:*)",
      "WebFetch(domain:www.shadcn-svelte.com)",
      "Bash(touch:*)",
      "WebFetch(domain:modelcontextprotocol.io)",
      "WebFetch(domain:pypi.org)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:spec.modelcontextprotocol.io)",
      "mcp__render__get_selected_workspace",
      "mcp__render__list_logs",
      "mcp__render__list_postgres_instances",
      "mcp__render__list_deploys",
      "mcp__render__query_render_postgres",
      "Bash(gh pr merge:*)",
      "mcp__render__get_deploy",
      "mcp__render__get_postgres",
      "mcp__render__create_postgres",
      "Bash(./venv/bin/python -m black:*)",
      "Bash(./venv/bin/python -m isort app/integrations/providers/google_calendar.py tests/test_google_calendar_integration.py)",
      "Bash(./venv/bin/python -m flake8 app/integrations/providers/google_calendar.py tests/test_google_calendar_integration.py --extend-ignore=E203,W503,E402,E501)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(pip index versions:*)",
      "Bash(ls:*)",
      "Bash(chmod:*)",
      "Bash(uv:*)",
      "Bash(claude mcp add git:*)",
      "Bash(claude mcp add-json git '{\n  \"\"type\"\": \"\"stdio\"\",\n  \"\"command\"\": \"\"uvx\"\",\n  \"\"args\"\": [\"\"mcp-server-git\"\", \"\"--repository\"\", \"\"/Users/elijahmurray/Development/Vandra/crewai-demo\"\"]\n}')",
      "Bash(npx create-next-app:*)",
      "Bash(cp:*)",
      "WebFetch(domain:developers.google.com)",
      "WebFetch(domain:ui.shadcn.com)",
      "Bash(psql:*)",
      "Bash(createdb:*)",
      "Bash(echo:*)",
      "Bash(brew services start:*)",
      "Bash(alembic init:*)",
      "Bash(alembic revision:*)",
      "Bash(alembic upgrade:*)",
      "WebFetch(domain:docs.crewai.com)",
      "Bash(npm install:*)",
      "Bash(npx shadcn@latest add dropdown-menu:*)",
      "Bash(npx shadcn@latest add:*)",
      "Bash(./scripts/run_dev.sh:*)",
      "Bash(npm install:*)",
      "Bash(npm install:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(cat:*)",
      "Bash(pkill:*)",
      "Bash(./scripts/kill_dev_ports.sh:*)",
      "Bash(mv:*)",
      "WebFetch(domain:community.crewai.com)",
      "WebFetch(domain:langchain-ai.lang.chat)",
      "WebFetch(domain:langchain-ai.github.io)",
      "WebFetch(domain:python.langchain.com)",
      "Bash(# Get list of changed files\nCHANGED_FILES=$(git diff --name-only main...HEAD)\n\n# Determine change type\nDEV_PATTERNS=\"\".claude/|scripts/|test_|pytest|CLAUDE.md|DATABASE_SETUP|AUTHENTICATION_SETUP|requirements-dev|package-lock|tsconfig|eslint|prettier|.gitignore|Makefile|docker|.env.example\"\"\nUSER_PATTERNS=\"\"app/api/|app/services/|app/tools/|frontend/app/|frontend/components/|app/agents/\"\"\n\nIS_DEV_CHANGE=false\nfor file in $CHANGED_FILES; do\n    if echo \"\"$file\"\" | grep -qE \"\"$USER_PATTERNS\"\"; then\n        IS_USER_CHANGE=true\n        break\n    fi\ndone\n\nif [ \"\"$IS_USER_CHANGE\"\" = true ]; then\n    echo \"\"üìù This is a user-facing change (affects core functionality)\"\"\n    echo \"\"Target: FEATURES.md\"\"\nelse\n    echo \"\"üìù This is a developer-focused change\"\"\n    echo \"\"Target: DEVELOPER_EXPERIENCE.md\"\"\nfi\n\necho -e \"\"\\nChanged files:\"\"\necho \"\"$CHANGED_FILES\"\")",
      "Bash(# Check if gh CLI is installed\nif ! command -v gh &> /dev/null; then\n    echo \"\"‚ùå GitHub CLI (gh) is not installed\"\"\n    echo \"\"Install it from: https://cli.github.com/\"\"\n    exit 1\nfi\n\n# Get current branch\nCURRENT_BRANCH=$(git branch --show-current)\nFEATURE_BRANCH=${BRANCH_NAME:-$CURRENT_BRANCH}\n\n# Ensure we''re not on main\nif [ \"\"$FEATURE_BRANCH\"\" == \"\"main\"\" ]; then\n    echo \"\"‚ùå Cannot create PR from main branch\"\"\n    exit 1\nfi\n\necho \"\"üîç Creating PR for branch: $FEATURE_BRANCH\"\")",
      "Bash(# Check for feature specification\nSPEC_FILES=$(find specs/ -name \"\"*migrate-crewai-to-langchain*\"\" -o -name \"\"*2025-07-30*\"\" | head -n 1)\nif [ -z \"\"$SPEC_FILES\"\" ]; then\n    echo \"\"‚ùå No specification found for this feature\"\"\n    echo \"\"üìù Run /cmd-feature-document first to create documentation\"\"\n    exit 1\nelse\n    echo \"\"‚úÖ Found specification: $SPEC_FILES\"\"\nfi\n\n# Check recent commits for documentation updates\nRECENT_DOCS=$(git log --oneline -n 10 --grep=\"\"docs:\"\" | head -n 1)\nif [ -z \"\"$RECENT_DOCS\"\" ]; then\n    echo \"\"‚ö†Ô∏è  No recent documentation commits found\"\"\nelse\n    echo \"\"‚úÖ Recent documentation commit: $RECENT_DOCS\"\"\nfi\n\necho \"\"‚úÖ Documentation appears to be complete\"\")",
      "Bash(# Ensure all changes are committed\nif [ -n \"\"$(git status --porcelain)\"\" ]; then\n    echo \"\"‚ùå You have uncommitted changes\"\"\n    echo \"\"Please commit or stash them before creating a PR\"\"\n    git status --short\n    exit 1\nelse\n    echo \"\"‚úÖ All changes are committed\"\"\nfi\n\n# Push to remote\necho \"\"üì§ Pushing branch to remote...\"\"\ngit push -u origin \"\"feature/migrate-crewai-to-langchain\"\")",
      "Bash(# Check current location\nCURRENT_DIR=$(pwd)\nCURRENT_BRANCH=$(git branch --show-current)\n\necho \"\"üìç Current directory: $CURRENT_DIR\"\"\necho \"\"üìç Current branch: $CURRENT_BRANCH\"\"\n\n# We''re in a worktree\nif [[ \"\"$CURRENT_DIR\"\" == *\"\"/trees/\"\"* ]]; then\n    FEATURE_BRANCH=\"\"$CURRENT_BRANCH\"\"\n    echo \"\"üìç In worktree for branch: $FEATURE_BRANCH\"\"\nelse\n    FEATURE_BRANCH=\"\"feature/migrate-crewai-to-langchain\"\"\nfi\n\necho \"\"üîç Checking feature branch: $FEATURE_BRANCH\"\")",
      "Bash(# Check PR status with correct fields\ngh pr view \"\"feature/migrate-crewai-to-langchain\"\" --json state,mergedAt -q ''.state + \"\" - MergedAt: \"\" + (.mergedAt // \"\"not merged\"\")'')",
      "Bash(# Fetch latest from main\ngit checkout main\ngit pull origin main)",
      "Bash(# Verify the branch has been merged\nFEATURE_BRANCH=\"\"feature/migrate-crewai-to-langchain\"\"\n\nif git branch --merged main | grep -q \"\"$FEATURE_BRANCH\"\"; then\n    echo \"\"‚úÖ Branch $FEATURE_BRANCH has been merged into main\"\"\nelse\n    echo \"\"‚ùå Branch $FEATURE_BRANCH has not been merged into main yet\"\"\n    exit 1\nfi)",
      "Bash(# List all worktrees\necho \"\"üìç Current worktrees:\"\"\ngit worktree list\n\n# Find the worktree path for our feature branch\nWORKTREE_PATH=$(git worktree list | grep \"\"feature/migrate-crewai-to-langchain\"\" | awk ''{print $1}'')\necho -e \"\"\\nüîç Worktree path for feature branch: $WORKTREE_PATH\"\")",
      "Bash(# Delete the local branch\nFEATURE_BRANCH=\"\"feature/migrate-crewai-to-langchain\"\"\n\ngit branch -d \"\"$FEATURE_BRANCH\"\" 2>/dev/null || git branch -D \"\"$FEATURE_BRANCH\"\"\necho \"\"‚úÖ Deleted local branch: $FEATURE_BRANCH\"\"\n\n# Delete remote branch if it exists\necho -e \"\"\\nüîç Attempting to delete remote branch...\"\"\ngit push origin --delete \"\"$FEATURE_BRANCH\"\" 2>/dev/null && echo \"\"‚úÖ Deleted remote branch\"\" || echo \"\"‚ÑπÔ∏è  Remote branch may have been deleted by GitHub after merge\"\")",
      "Bash(pg_isready:*)",
      "Bash(.claude/scripts/worktree-create.sh:*)",
      "Bash(./scripts/worktree-create.sh:*)",
      "Bash(scripts/worktree-create.sh:*)"
    ]
  },
  "hooks": {
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": ".claude/scripts/notify-agent-complete.sh notification 'Claude needs your attention'"
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": ".claude/scripts/notify-agent-complete.sh main 'Claude has finished'"
          }
        ]
      }
    ]
  }
}